name: Daily Alpha Release

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Get current version
        id: get_version
        run: |
          version=$(grep '__version__' version.py | cut -d '"' -f 2)
          echo "Current Version: $version"
          echo "version=$version" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          version=${{ env.version }}
          echo "Current Version: $version"
          IFS='-' read -r base_version alpha_suffix <<< "$version"
          if [[ $alpha_suffix == alpha* ]]; then
            alpha_number=$(echo "$alpha_suffix" | grep -oP '(?<=alpha\.)\d+')
            if [ -z "$alpha_number" ]; then
              new_alpha_number=1
            else
              new_alpha_number=$((alpha_number + 1))
            fi
            new_version="${base_version}-alpha.${new_alpha_number}"
          else
            new_version="${version}-alpha.1"
          fi
          
          echo "New Version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Debug version update
        run: |
          echo "Current content of version.py before update:"
          cat version.py
          echo "Setting new version to ${{ env.new_version }}"
          # Update the version.py file with the new version
          sed -i 's/__version__ = ".*"/__version__ = "${{ env.new_version }}"/' version.py
          echo "New content of version.py after update:"
          cat version.py

      - name: Commit version update
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add version.py
          git status  # Check if version.py is staged for commit
          git commit -m "Bump version to ${{ env.new_version }}" || echo "No changes to commit"
          git push

      - name: Generate Changelog
        id: generate_changelog
        run: |
          last_tag=$(git describe --tags --abbrev=0)
          changelog=$(git log --pretty=format:"%h %s" $last_tag..HEAD)
          printf "%s\n" "$changelog" > changelog.txt
          echo "Changelog generated and saved to changelog.txt"

      - name: Create Alpha Release
        id: create_alpha_release
        run: |
          changelog=$(cat changelog.txt)
          gh release create "v${{ env.new_version }}" --title "v${{ env.new_version }}" --notes "$changelog" --prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}